esphome:
  name: athom-presence-sensor
  friendly_name: Athom Presence Sensor

esp8266:
  board: esp01_1m
  restore_from_flash: True
  early_pin_init: False

packages:
  remote_package:
    url: https://github.com/bernardesarthur/myesphome
    ref: main
    refresh: 300s
    files:
      - base.yaml

#Add after install on device
wifi:
  use_address: 192.168.212.223

i2c:
  sda: GPIO4
  scl: GPIO5
  scan: True

uart:
  tx_pin: GPIO15
  rx_pin: GPIO13
  baud_rate: 115200

button:
  - platform: restart
    name: Restart
    id: restart_esp
    entity_category: config
    internal: True
    disabled_by_default: False

  - platform: template
    name: "Restart_mmWave"
    id: "restart_mmwave"
    entity_category: config
    internal: True
    on_press:
      - uart.write: "resetSystem\r\n"

  - platform: template
    name: Restart device
    entity_category: config
    internal: False
    disabled_by_default: False
    on_press:
      - button.press: restart_mmwave
      - delay: 1s
      - button.press: restart_esp

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO14
      inverted: True
    id: pir
    name: PIR Sensor
    device_class: motion
    internal: False
    disabled_by_default: False
    publish_initial_state: True
    filters: 
      - delayed_on: 50ms
      - delayed_off: 10s
    on_press:
      then:
        - light.turn_on: led

  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    id: button_1
    name: Button 1
    internal: False
    disabled_by_default: False
    publish_initial_state: True
    filters: 
      - delayed_on_off: 10ms

  - platform: gpio
    pin:
      number: GPIO12
      mode: INPUT_PULLUP
    name: mmWave Sensor
    id: mmwave
    internal: False
    disabled_by_default: False
    publish_initial_state: True
    filters:
      - delayed_on: 50ms
    device_class: motion
    on_release:
      then:
        - light.turn_off: led

  - platform: template
    name: "Occupancy"
    id: occupancy
    device_class: occupancy
    internal: False
    disabled_by_default: False
    publish_initial_state: True
    lambda: |-
      if ( id(mmwave).state and id(pir).state) {
        return true;
      }
      else if (id(mmwave).state == 0) {
        return false;
      }
      else {
        return id(occupancy).state;
      }

sensor:
  - platform: bh1750
    name: Light Sensor
    id: light_sensor
    internal: False
    disabled_by_default: False
    address: 0x23
    update_interval: 5s

switch:
  - platform: template
    name: "mmWave Status"
    id: "mmwave_sensor"
    internal: True
    disabled_by_default: False
    entity_category: config
    optimistic: True
    # RESTORE_DEFAULT_OFF or RESTORE_DEFAULT_ON or RESTORE_INVERTED_DEFAULT_OFF or RESTORE_INVERTED_DEFAULT_ON or ALWAYS_OFF or ALWAYS_ON or DISABLED
    restore_mode: DISABLED
    turn_on_action:
      - uart.write: "sensorStart\r\n"
    turn_off_action:
      - uart.write: "sensorStop\r\n"

  - platform: template
    name: Presence Light
    id: presence_light
    entity_category: config
    optimistic: True
    internal: False
    disabled_by_default: False
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      if:
        condition:
          binary_sensor.is_on: occupancy
        then:
          - light.turn_on: led
    on_turn_off:
      - light.turn_off: led

number:
  - platform: template
    name: Farthest Detection          #Value range: 1.9 ~ 12m  Default: 6
    id: Farthest_Detection
    entity_category: config
    min_value: 1.9
    max_value: 12
    initial_value: 6
    optimistic: True
    step: 0.1
    restore_value: True
    unit_of_measurement: m
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 500ms
      - uart.write: !lambda
          std::string ranges = "setRange 1.8 " + str_sprintf("%.1f",id(Farthest_Detection).state) + "\r\n";
          return std::vector<uint8_t>(ranges.begin(), ranges.end());
      - delay: 500ms
      - uart.write: "saveConfig\r\n"
      - delay: 500ms
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: Maintain Sensitivity                 #Value range: 0 ~ 9   Default Maintain sensitivity: 7    Default Trigger sensitivity: 5
    id: Maintain_Sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: True
    step: 1
    restore_value: True
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 500ms
      - uart.write: !lambda
          std::string sensitivitys = "setSensitivity " + str_sprintf("%.0f",id(Maintain_Sensitivity).state) + " " + str_sprintf("%.0f",id(Trigger_Sensitivity).state) + "\r\n";
          return std::vector<uint8_t>(sensitivitys.begin(), sensitivitys.end());
      - delay: 500ms
      - uart.write: "saveConfig\r\n"
      - delay: 500ms
      - switch.turn_on: mmwave_sensor


  - platform: template
    name: Trigger Sensitivity     #Value range: 0 ~ 9   Default Maintain sensitivity: 7    Default Trigger sensitivity: 5
    id: Trigger_Sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 5
    optimistic: True
    step: 1
    restore_value: True
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 500ms
      - uart.write: !lambda
          std::string sensitivityss = "setSensitivity " + str_sprintf("%.0f",id(Maintain_Sensitivity).state) + " " + str_sprintf("%.0f",id(Trigger_Sensitivity).state) + "\r\n";
          return std::vector<uint8_t>(sensitivityss.begin(), sensitivityss.end());
      - delay: 500ms
      - uart.write: "saveConfig\r\n"
      - delay: 500ms
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: Detection Delay      #Confirmation delay      Value range: 0 ～ 100  default 0.050 seconds.
    id: Detection_Delay
    entity_category: config
    min_value: 0.1
    max_value: 60
    initial_value: 0.1
    optimistic: True
    step: 0.1
    restore_value: True
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 500ms
      - uart.write: !lambda |-
          std::string detections = "setLatency " + str_sprintf("%.1f",id(Detection_Delay).state) + " " + str_sprintf("%.0f",id(Fading_Time).state) + "\r\n";
          return std::vector<uint8_t>(detections.begin(),detections.end());
      - delay: 500ms
      - uart.write: "saveConfig\r\n"
      - delay: 500ms
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: Fading Time           #Fade-out delay        Value range: 0.5 ～ 1500, default 15 seconds.
    id: Fading_Time
    entity_category: config
    min_value: 1
    max_value: 300
    initial_value: 15
    optimistic: True
    step: 1
    restore_value: True
    unit_of_measurement: seconds
    mode: auto
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 500ms
      - uart.write: !lambda |-
          std::string fadings = "setLatency " + str_sprintf("%.1f",id(Detection_Delay).state) + " " + str_sprintf("%.0f",id(Fading_Time).state) + "\r\n";
          return std::vector<uint8_t>(fadings.begin(), fadings.end());
      - delay: 500ms
      - uart.write: "saveConfig\r\n"
      - delay: 500ms
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: Blockade Time                  #Configure block time        Value range: 1 ～ 255, default 1 seconds.
    id: Blockade_Time
    entity_category: config
    min_value: 1
    max_value: 255
    initial_value: 1
    optimistic: True
    step: 1
    restore_value: True
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 500ms
      - uart.write: !lambda
          std::string blockades = "setInhibit " + str_sprintf("%.0f",x) + "\r\n";
          return std::vector<uint8_t>(blockades.begin(), blockades.end());
      - delay: 500ms
      - uart.write: "saveConfig\r\n"
      - delay: 500ms
      - switch.turn_on: mmwave_sensor

light:
  - platform: status_led
    name: Status LED
    id: led
    pin: GPIO16
    disabled_by_default: False
    internal: False
    entity_category: config