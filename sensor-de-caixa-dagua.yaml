esphome:
  name: sensor-de-caixa-dagua
  friendly_name: Sensor de Caixa Dagua

esp8266:
  board: esp01_1m
  restore_from_flash: True
  early_pin_init: False

packages:
  remote_package:
    url: https://github.com/bernardesarthur/myesphome
    ref: main
    refresh: 300s
    files:
      - base.yaml

# Add after install on device
wifi:
  use_address: 192.168.212.223
  # Desabilita a re-conexão contínua à rede para economizar energia (somente se for a bateria)
  fast_connect: True
  # NONE or LIGHT or HIGH
  power_save_mode: HIGH

# Deep Sleep para economizar bateria (somente se for a bateria)
deep_sleep:
  run_duration: 5s  # Tempo que o ESP8266 ficará ligado
  sleep_duration: 60s  # Tempo de sono antes de ligar novamente

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    id: boia
    name: boia
    internal: False
    disabled_by_default: False
    publish_initial_state: True
    device_class: problem
    entity_category: diagnostic
    filters: 
      - delayed_on: 10ms
      - delayed_off: 10ms

sensor:
  - platform: ultrasonic
    trigger_pin: GPIO4
    echo_pin: GPIO5
    internal: True
    disabled_by_default: False
    id: ultrassonico
    update_interval: 60s
    unit_of_measurement: "m"
    filters:
      - median:
          window_size: 5
          send_every: 1
          send_first_at: 1
    # Configurações opcionais do sensor de ultrassom
#    pulse_time: 20us
#    timeout: 1.0m

  - platform: template
    id: nivel
    name: Nível
    internal: False
    disabled_by_default: False
    lambda: return (0.94-id(ultrassonico).state);
    unit_of_measurement: "m"
    device_class: distance
    accuracy_decimals: 2
    update_interval: 60s

  - platform: template
    id: percentual_var
    name: Percentual
    internal: False
    disabled_by_default: False
    unit_of_measurement: "%"
    lambda: |-
      float valor = (id(nivel).state / 0.65) * 100;
      if (valor > 100) {
        return 100;
      } else if (valor < 0) {
        return 0;
      } else {
        return valor;
      }
    accuracy_decimals: 1
    update_interval: 60s
    device_class: moisture

# Somente se for a bateria e se for ESP8266
  - platform: adc
    pin: VCC
    name: Tensão da Bateria
    update_interval: 60s
    id: tensao_bateria
    internal: False
    disabled_by_default: False

  - platform: template
    name: Nível da Bateria
    id: nivel_bateria
    lambda: |-
      // Considera que a tensão da bateria vai de 3.0V (0%) até 4.2V (100%)
      float tensao = id(tensao_bateria).state * 3.3;
      return (tensao - 3.0) * 100.0 / (4.2 - 3.0);
    unit_of_measurement: "%"
    update_interval: 60s
    internal: False
    disabled_by_default: False

# Somente se for ESP8266 sem bateria
#  - platform: adc
#    pin: VCC
#    name: Tensão da Bateria
#    update_interval: 60s
#    id: tensao_entrada
#    internal: False
#    disabled_by_default: False

#  - platform: template
#    id: percentual_var
#    internal: True
#    disabled_by_default: False
#    unit_of_measurement: "%"
#    lambda: return ((id(nivel).state/0.65)*100);
#    accuracy_decimals: 1
#   update_interval: 60s
#    device_class: moisture

#  - platform: template
#    id: percentual
#    internal: False
#    disabled_by_default: False
#    name: Percentual
#    unit_of_measurement: "%"
#    accuracy_decimals: 1
#    update_interval: 60s
#    device_class: moisture
#    lambda: |-
#      if (id(percentual_var).state > 100) {
#      return 100;
#      } else if (id(percentual_var).state < 0) {
#      return 0;
#      } else {
#      return id(percentual_var).state;
#      }

#uart:
#    rx_pin: 7 
#    baud_rate: 9600 
 
#sensor: 
#  - platform: a02yyuw 
#    id: a02yyuw_sensor 
#    name: "Water level" 
#    unit_of_measurement: 'm' 
#    accuracy_decimals: 1 
#    filters: 
#      - multiply: 0.001 
#      - throttle: 5s 
#      - heartbeat: 5s 
#      - quantile: 
#         window_size: 7 
#         send_every: 4 
#         send_first_at: 3 
#         quantile: .9 
#      - debounce: 0.1s 