esphome:
  name: sensor-de-caixa-dagua
  friendly_name: Sensor de Caixa Dagua

esp32:
  board: esp32dev
  framework:
    type: arduino

esp32_ble_tracker:
  scan_parameters:
    active: True

bluetooth_proxy:
  active: True

packages:
  remote_package:
    url: https://github.com/bernardesarthur/myesphome
    ref: main
    refresh: 300s
    files:
      - base.yaml

# Add after install on device
wifi:
  use_address: 192.168.212.223
  # Desabilita a re-conexão contínua à rede para economizar energia (somente se for a bateria)
  fast_connect: True
  # NONE or LIGHT or HIGH
  power_save_mode: HIGH

# Deep Sleep para economizar bateria (somente se for a bateria)
deep_sleep:
  run_duration: 5s  # Tempo que o ESP ficará ligado
  sleep_duration: 60s  # Tempo de sono antes de ligar novamente

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO1
      mode: INPUT_PULLUP
      inverted: True
    name: Boia 1 (33%)
    id: b1
    internal: False
    disabled_by_default: False
    publish_initial_state: True
    device_class: moisture
    filters: 
      - delayed_on: 10ms
      - delayed_off: 10ms

  - platform: gpio
    pin:
      number: GPIO2
      mode: INPUT_PULLUP
      inverted: True
    name: Boia 2 (66%)
    id: b2
    internal: False
    disabled_by_default: False
    publish_initial_state: True
    device_class: moisture
    filters: 
      - delayed_on: 10ms
      - delayed_off: 10ms

  - platform: gpio
    pin:
      number: GPIO3
      mode: INPUT_PULLUP
      inverted: True
    name: Boia 3 (100%)
    id: b3
    internal: False
    disabled_by_default: False
    publish_initial_state: True
    device_class: moisture
    filters: 
      - delayed_on: 10ms
      - delayed_off: 10ms

  - platform: template
    name: Status do Alarme
    id: status_alarme
    internal: False
    disabled_by_default: False
    publish_initial_state: True
    device_class: problem
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms

sensor:
  - platform: template
    name: Percentual de Preenchimento da Caixa D'água
    id: percentual_agua
    internal: False
    disabled_by_default: False
    unit_of_measurement: "%"
    accuracy_decimals: 0
    lambda: |-
      if (id(b1).state && id(b2).state && id(b3).state) {
        return 100.0;  // Todas as boias ligadas, caixa cheia
      } else if (id(b1).state && id(b2).state) {
        return 66.0;  // Boias 1 e 2 ligadas, dois terços da caixa cheia
      } else if (id(b1).state) {
        return 33.0;  // Apenas boia 1 ligada, um terço da caixa cheia
      } else {
        return 0.0;   // Nenhuma boia ligada, caixa vazia
      }
    update_interval: 60s
    device_class: moisture
    on_value:
      then:
        - lambda: |-
            float percentual = id(percentual_agua).state;
            float liga_valor = id(liga_relay).state;
            float desliga_valor = id(desliga_relay).state;
            float nivel_alarme_valor = id(nivel_alarme).state;

            // Lógica para o relay 1
            if (percentual < liga_valor) {
              id(relay_1).turn_on();
            } else if (percentual > desliga_valor) {
              id(relay_1).turn_off();
            }

            // Lógica para a sirene e status alarme
            if (percentual < nivel_alarme_valor) {
              if (id(beep_sonoro).state) {
                id(relay_sirene).turn_on();
              }
              id(status_alarme).publish_state(true);
            } else if (percentual > nivel_alarme_valor) {
              id(relay_sirene).turn_off();
              id(status_alarme).publish_state(false);
            }

#        - lambda: |-
#            float percentual = id(percentual_agua).state;
#            float nivel_alarme_valor = id(nivel_alarme).state;
#
#            // Loop liga/desliga da sirene enquanto percentual for menor que o nível de alarme
#            if (percentual < nivel_alarme_valor) {
#              while (percentual < nivel_alarme_valor) {
#                id(relay_sirene).turn_on();
#                delay(120000);  // Liga a sirene por 2 minutos (120000 ms)
#                id(relay_sirene).turn_off();
#                delay(120000);  // Desliga a sirene por 2 minutos (120000 ms)
#              }
#              id(status_alarme).publish_state(true);
#            } else if (percentual > nivel_alarme_valor) {
#              id(relay_sirene).turn_off();
#              id(status_alarme).publish_state(false);
#            }

switch:
  - platform: gpio
    pin:
      number: GPIO4
      inverted: False
    name: Relay 1 
    id: relay_1
    internal: False
    disabled_by_default: False
    # RESTORE_DEFAULT_OFF or RESTORE_DEFAULT_ON or RESTORE_INVERTED_DEFAULT_OFF or RESTORE_INVERTED_DEFAULT_ON or ALWAYS_OFF or ALWAYS_ON or DISABLED
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    pin:
      number: GPIO5
      inverted: False
    name: Relay Sirene
    id: relay_sirene
    internal: False
    disabled_by_default: False
    # RESTORE_DEFAULT_OFF or RESTORE_DEFAULT_ON or RESTORE_INVERTED_DEFAULT_OFF or RESTORE_INVERTED_DEFAULT_ON or ALWAYS_OFF or ALWAYS_ON or DISABLED
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: Beep Sonoro
    id: beep_sonoro
    internal: False
    disabled_by_default: False
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON

number:
  - platform: template
    name: Liga relé em
    id: liga_relay
    min_value: 0
    max_value: 100
    step: 1
    restore_value: True
    optimistic: True
    disabled_by_default: False
    internal: False
    mode: BOX

  - platform: template
    name: Desliga relé em
    id: desliga_relay
    min_value: 0
    max_value: 100
    step: 1
    restore_value: True
    optimistic: True
    disabled_by_default: False
    internal: False
    mode: BOX

  - platform: template
    name: Nível Alarme
    id: nivel_alarme
    min_value: 0
    max_value: 100
    step: 1
    restore_value: True
    optimistic: True
    disabled_by_default: False
    internal: False
    mode: BOX